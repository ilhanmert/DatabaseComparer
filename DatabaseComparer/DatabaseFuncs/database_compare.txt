-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
get
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION public.get(
	)
    RETURNS jsonb
    LANGUAGE 'plpgsql'
AS $BODY$
BEGIN
RETURN(
		SELECT json_agg(b)::jsonb FROM(
			select * from (SELECT 'function' as type, r.specific_schema || '.' || r.routine_name as head,
						coalesce(r.routine_definition, '') as body,
								 coalesce(replace(replace(replace(((select array_agg(a.sign) FROM(SELECT(parameter_name || ' ' || data_type) as sign
																FROM information_schema.parameters p
																WHERE p.specific_name = r.specific_name
																ORDER BY ordinal_position) a)::text),'{','('),'}',')'),'"',''),'()') || ' returns '|| r.data_type as parameters
								 FROM information_schema.routines r
								 WHERE r.specific_schema in ('public')
									   union all
			select 'table',table_schema||'.'||table_name, public.getTableDDL(table_schema::text,table_name::text),'' 
				from information_schema.tables where table_schema in ('public')) c
								 ORDER BY type, head) b
	);
END;
$BODY$;

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
getTableDDL
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION public.gettableddl(
	_schema_name character varying,
	_table_name character varying)
    RETURNS character varying
    LANGUAGE 'plpgsql'
AS $BODY$
DECLARE _result character varying := '';
BEGIN
	SELECT array_agg(a.name)::character varying into _result 
			FROM (SELECT column_name || ' ' || data_type || ' ' || (CASE WHEN is_nullable = 'NO' THEN 'NOT NULL' ELSE 'NULL' END) || 
		(CASE WHEN is_identity = 'NO' THEN '' ELSE ' identity' END) || (CASE WHEN column_default is null THEN '' ELSE ' default ' || column_default END) as name
		from information_schema.columns 
		where table_schema = _schema_name AND table_name = _table_name
		order by ordinal_position) a;
	RETURN (SELECT row_to_json(a)::character varying FROM (SELECT replace(replace(_result,'{','('),'}',')') as columns, 
										public.getTableConstraints(_schema_name, _table_name) as constraints, 
										public.getTableIndexes(_schema_name, _table_name) as indexes) a);
END;
$BODY$;

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
getTableConstraints
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION public.gettableconstraints(
	_schema_name character varying,
	_table_name character varying)
    RETURNS character varying
    LANGUAGE 'plpgsql'
AS $BODY$
BEGIN
	RETURN (select array_agg(a.constraint)::character varying from(SELECT (constraint_name || ' ' || constraint_type) as constraint
		from information_schema.table_constraints where table_schema = _schema_name AND table_name = _table_name
		   order by constraint_name)a);
END;
$BODY$;

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
getTableIndexes
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION public.gettableindexes(
	_schema_name character varying,
	_table_name character varying)
    RETURNS character varying
    LANGUAGE 'plpgsql'
AS $BODY$
BEGIN
	RETURN (select array_agg(indexdef)::character varying from(SELECT indexdef
		from pg_indexes where schemaname = _schema_name AND tablename = _table_name
		   order by indexname)a);
END;
$BODY$;